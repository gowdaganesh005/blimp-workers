// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  userId          String @id @default(uuid())
  username        String @unique
  fullName        String
  email           String @unique
  password        String
  followerCount   Int @default(0)
  followingCount  Int @default(0)
  Posts           Post[]
  Likes           Likes[]
  Comments        Comments[]
  following       Following[] @relation("Following") 
  followee        Following[] @relation("Followed")
}

model Post{
  postId           String @id @default(uuid())
  user             User  @relation(fields: [userId] ,references: [userId])
  userId           String
  content          String
  Num_Likes        Int @default(0)
  Num_Comments     Int @default(0)
  Num_Repost       Int @default(0)
  Likes            Likes[]
  Comments         Comments[]
  


}

model Likes{
  likeId String @id @default(uuid())
  post   Post   @relation(fields: [postId],references: [postId])
  postId String 
  user   User   @relation(fields: [userId],references: [userId])
  userId String

  @@unique([userId,postId])
}

model Following{
  followId String @id @default(uuid())
  follower User   @relation("Following",fields: [followerId],references: [userId])
  followerId String
  followee User   @relation("Followed",fields: [followeeId],references: [userId])
  followeeId String
}

model Comments{
  commentId String @id @default(uuid())
  post  Post @relation(fields: [postId],references: [postId])
  postId String 
  user  User @relation(fields: [userId],references: [userId])
  userId String
  comment String 

}